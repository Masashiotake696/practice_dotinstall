■UNIXの説明
  UNIXはOSの一種。
  WindowsやmacOSは主に個人用PCに使われるのに対して、UNIXは主にインターネットを構成するサーバ用に使われる。
  UNIXの互換OS ... BSD, Minix, Linuxなど
    ▼ディストリビューション ... Linuxには様々な種類があり、それらをディストリビューションと呼ぶ。本来Linuxと言う言葉はLinuxカーネルのことを意味しているが、カーネルだけではOSとして手軽に使うことはできない。そこで、Linuxを利用しやすいようにアプリケーションなどをパッケージにしてすぐに使える状態にしたものをディストリビューション呼ぶ。
      有名なディストリビューションにはいくつか系統があり、大きく分けるとRed Hat系とDebian系がある。
      Red Hat系で有名なディストリビューションは以下。
        Red Hat Enterprise Linux(RHEL) ... アメリカのRedHat社が開発した商用向けのLinuxディストリビューション。クライアントPC用途ではなく、大規模システムのサーバに利用される。
        CentOS ... RHELのクローンOSでRHELの商用部分を取り除いたディストリビューション。安定性も比較的高く、商用で使われる機会も増えている。
      Debian系で有名なディストリビューションは以下。
        Debian ... 世界中の有志が集結して作り上げた100%フリーで使うことができるLinuxディストリビューション。様々なCPU上での動作サポートと、数万にも及ぶ膨大なアプリケーション数が特徴で、多くの企業のシステムに採用されている。
        Ubuntu ... Debianをベースに作られた世界的な人気を持つディストリビューション。使いやすいデスクトップで初心者にも抵抗なく使えるのが特徴。多くの企業のシステムに使われている。
    ▼POSIX ... 全てのUnix互換OSで使うことができるコマンド。
      FYI) macOSはBSDをベースにしたOSになっているので、POSIXに準拠したUNIXコマンドが使える
■プロンプトの説明
  例）[vagrant@localhost ~]$
    これはプロンプトと呼ばれる入力を促している部分。
    ▼[]の中身
      ユーザー情報を表している。
      ♦︎@前
        今ログインしているユーザー名を表している。
      ♦︎@後
        ユーザーがいるマシン名を表している。
      ♦︎~の部分
        今自分がどこのディレクトリにいるかをを表している。UNIXで~(チルダ)はユーザーのホームディレクトリを短く表現するための記法。
    ▼[]以降の記号
      ユーザーの種別を表している。
      $は一般ユーザー、#は管理ユーザーを表す。
■システムの全体像
  homeディレクトリ以下にはシステムを構成するたくさんのディレクトリが並んでいる。ディストリビューションによって多少違いがあるが、UNIXの標準的な構成。
  よく使うものは以下。
    /bin ... バイナリファイルが入っているフォルダ。catやcpといったシステムを動かすための基本コマンドの実行ファイルが入っている。
    /etc(エトセ) ... アプリケーションの設定ファイルなどが入っている。
      例)
        ▼/etc/passwd ... ユーザーの一覧
          第一フィールド ... ユーザー名
          第二フィールド ... 暗号化パスワード。xなどが入れられているが、これはパスワードが設定されていると言う意味。
          第三フィールド ... ユーザーのid
          第四フィールド ... グループのid
          第五フィールド ... ユーザーにつけられたコメント
          第六フィールド ... ユーザーのホームディレクトリの位置
          第七フィールド ... ユーザーのログインシェル(ユーザーがログインした際に最初に起動するシェル)名 (bashなど)
        ▼/etc/group
          第一フィールド ... グループ名
          第二フィールド ... 暗号化パスワード。xなどが入れられているが、これはパスワードが設定されていると言う意味。
          第三フィールド ... グループのid
          第四フィールド ... グループに所属しているユーザー名
    /home ... 各ユーザのホームディレクトリが入っている。ホームディレクトリには、ドットから始まるドットファイルと呼ばれる設定ファイルが入っており、簡単にいじれないように隠しファイルになっている。
    /sbin ... 主にシステム管理用のコマンドが入っている。
    /usr ... 一般的なアプリケーションが格納されているディレクトリ。新しくアプリケーションをインストールする場合は大抵ここに入れられる。
    /var ... システムのログファイルなど、頻繁に書き換わるようなファイルが入っている。一般的なシステムログは/var/log/messagesにある。
■Path
  home/vagrantのような表示をUNIXではpathと呼ぶ。
  Pathの指定には相対指定と絶対指定の2種類ある。
    相対指定 ... 現在のディレクトリから見て相対的な場所を指定する方法。
      例) cd unix_lessons/
    絶対指定 ... 一番上の階層から絶対的に指定する方法
      例) /home/vagrant/unix_lessons
■コマンド(抜粋)
  ▼cp
    ♦︎ファイルのコピー
      cp text.txt text2.txt (text.txtと言うファイルをtext2.txtと言うファイル名でコピーする)
      ※今のディレクトリは.で表現できるので、以下のようにcpコマンドを使うことができる。
        cp myapp/hello.txt .
    ♦︎ディレクトリのコピー
      cp -r myapp myapp2 (myappと言うディレクトリをmyapp2と言うディレクトリ名でコピーする。この時、再帰的にコピーすると言う意味で-rオプション(recursive)をつける)
  ▼mkdir
    mkdir -p myapp3/config (myapp3と言う存在しないディレクトリのなかにconfigと言うディレクトリを作る。この時-pオプション(parents)をつける)
  ▼rmdir
    rmdir myapp (myappと言うディレクトリを削除する。ただし、rmdirは中身が空のディレクトリにしか使えない。)
    rm -r myapp2 (中身があるディレクトリを削除する。この時、-rオプションをつける)
  ▼less
    ファイルを表示する。長いファイルを表示する場合に使用する。
    ♦︎操作方法
      ♦︎移動
        ・矢印キーでスクロール
        ・Ctrl + f(forward)で一画面先、Ctrl + b(back)で一画面前
        ・gでファイルの先頭、Shift + gでファイルの末尾
      ♦︎終了
        q
      ♦︎検索
        /の後に検索語を入れる。次の箇所に移動したい場合はnextのn、そして戻りたい場合はShift + nを押す。
  ▼history
    コマンドの履歴を表示する。!の後に履歴番号を付ければ指定した番号のコマンド呼び出すことができる。
  ▼!
    直前のコマンドを呼び出す。
    !! ... 直前のコマンドを実行
    !-2 ... 2個前のコマンドを実行
    !$ ... コマンドに渡した最後の文字列を再利用する
    !とした後にpwとすると、pwから始まる直近のコマンドを実行することができる。実行したくない場合は、:pをつける(!pw:p)と実行せずにそのコマンドの表示だけしてくれる。
  ▼--helpオプション
    コマンドについて詳しく調べることができる。
  ▼man
    コマンドについて--helpオプションよりもさらに詳しく調べることができる。manはmanualの略。lessと同じ方法で操作できる。
  ▼touch
    空のファイルを作成する。
  ▼ls
    現在のディレクトリにあるファイルを表示する。
    -lオプション ... ファイルの詳細も表示する
    ♦︎見方
      ○第一フィールド
        最初の一文字 ... ファイル種別
          ファイルの種類
            d(directory)はディレクトリ、-は通常のファイル、l(symbolic link)はシンボリックリンク
        最初の一文字に続くrやwやx ... ファイルのアクセス権、パーミッションに関する情報。
          権限の種類
            r(read)は読み取り権限、w(write)は書き込み権限、x(execute)は実行権限(ディレクトリにxが付いていたら開くことができると言う意味)、-は権限なし。
            設定値
              設定値は所有者、グループ、その他の順にそれぞれ0から7の整数を割り当てる。9桁の権限を構成するそれぞれの3桁を2進数の桁と考える。それぞれの整数は以下の設定値を加算して求める。
                読み込みができる = 4 (3桁目, 2の2乗)
                書き込みができる = 2 (2桁目, 2の1乗)
                実行ができる = 1 (1桁目, 2の0乗)
              例) 所有者には書き込みと読み込みだけさせて、所有グループには読み込みだけさせたい場合
                644 ... 6(読み込み=4 + 書き込み=2)4(読み込み=4)4(読み込み=4)
          権限対象
            2文字目~4文字目 u(ser) ... ファイルの所有者に対する権限
            5文字目~7文字目 g(roup) ... ファイルの所有グループに対する権限
            8文字目~10文字目 o(ther) ... その他に対する権限
        例)
          「-rw-r--r--」
            「ファイル種別」がファイル、「所有者」に「読み取り」と「書き込み」の権限、「所有グループ」に「読み取り」の権限、「その他」に「読み取り」の権限
          「drwxr-xr-x」
            「ファイル種別」がディレクトリ、「所有者」に「読み取り」と「書き込み」と「実行」の権限、「所有グループ」に「読み取り」と「実行」の権限、「その他」に「読み取り」と「実行」の権限
      ○第二フィールド ... ハードリンク(元ファイルと同じiノードを指すファイル)数
      ○第三フィールド ... ファイルを所有しているユーザー名
      ○第四フィールド ... ファイルを所有しているグループ名
      ○第五フィールド ... ファイルサイズ
      ○第六フィールド ... 最終更新日時
      ○第七フィールド ... ファイル名
  ▼chmod
    ファイルのアクセス権限、パーミッションの変更。
    chmod アクセス権限 ファイル名
    アクセス権限の書き方
      方法①設定値を使った付与と削除
        設定値は所有者、グループ、その他の順にそれぞれ0から7の整数を割り当てる。それぞれの整数は以下の設定値を加算して求める。
          読み込みができる = 4 (3桁目, 2の2乗)
          書き込みができる = 2 (2桁目, 2の1乗)
          実行ができる = 1 (1桁目, 2の0乗)
        例) 所有者には書き込みと読み込みだけさせて、所有グループには読み込みだけさせたい場合
          644 ... 6(読み込み=4 + 書き込み=2)4(読み込み=4)4(読み込み=4)
      方法② +(付与)、-(削除)を使った付与と削除
        権限対象+権限のように書く。
        例) グループに対してxの権限をつける
          g+x
        例) グループとその他に対してxの権限をつける
          go+x
        例) 全ての対象に対してxの権限を削除する
          a-x (全ての対象という意味でaという記号が使える)
  ▼chown
    change ownerの意味で、ファイルの所有者を変える。
    使用方法
      sudo chown ユーザー名:グループ名 ファイル名
      ※管理者用のコマンドなので、sudoをつける
  ▼groups
    自分が所属しているグループを確認
  ▼type
    コマンドに関する情報を表示する。
    コマンドが存在しない場合はnot foundが表示され、コマンドが存在する場合は、その実態についての説明が表示される。
  ▼echo
    画面に文字列や数値、変数を表示する。
  ▼export
    環境変数を定義・リスト表示するコマンド。
    ♦︎定義方法
      export 環境変数名=値
      例) TESTという環境変数を定義する
        export TEST="hoge"
    ♦︎リスト表示方法
      -pオプションを使う。
      export -p
    ♦︎削除方法
      -nオプションを使う。
      例) TESTという環境変数を削除する
      export -n TEST
  ▼which
    指定したコマンドのパスを表示する
  ▼su
    substutute userの意味。任意のユーザーに切り替えることができる。
      例) su otake (ユーザーをユーザー名otakeに切り替える)
    ユーザー名を省略するとrootユーザーになる。
      例) su (ユーザーをrootに切り替える)
    -lオプション
      -lオプションをつけるとrootユーザーとしてログインし直し、-lをつけないと単にユーザーを切り替えるだけで、現在のディレクトリの位置や諸々の環境変数をそのまま引き継ぐ。
      通常はログインし直した方が良いので
        su -l
      とする。
      この時、lを省略して
        sudo -
      とすることもできる。
  ▼exit
    rootユーザーからのログアウト、ターミナルの終了。
  ▼sudo
    管理者ユーザーとしてコマンドを実行する。
    sudoを使えるようにするには以下の設定をする。
      ①以下のコマンドを実行してユーザーをrootに変更
        su -
      ②ユーザをrootに切り替えたら以下のコマンドを入力して、sudoers(/etc/sudoersはUNIX系のOSで使われるsudoコマンドで変更できるユーザと実行できるコマンドを記述する設定ファイル)を編集
        visudo (sudoの権限を変更するためのコマンド。sudoersファイルを安全に編集するためのコマンド。)
      ③sudoersファイルの100行目付近にある以下の文章の下に次の文を加える。
        追加前
          root   ALL=(ALL)   ALL
        追加後
          root   ALL=(ALL)   ALL
          [追加するユーザー名]   ALL=(ALL)   ALL
      ④sudoersファイルの変更を保存する。
  ▼wc
    word countの意味。ファイルの行数や単語数を表示する。
    ♦︎見方
      第一フィールド ... 行数 (※行数だけ知りたいときは-lオプションを使う)
      第二フィールド ... 単語数 (※日本語は英語と違って単語の区切りが空白やタブではないので正確な単語数は出てこない)
      第三フィールド ... バイト数
      第四フィールド ... ファイル名
  ▼head
    ファイルの先頭から何行かだけを表示。デフォルトは10行
    ♦︎行数の指定方法
      ①-nオプション
        head -n 3 messages
      ②-[行数]
        head -3 messages
  ▼tail
    ファイルの末尾から難行かだけを表示。デフォルトは10行
    ♦︎行数の指定方法
      ①-nオプション
        tail -n 3 messages
      ②-[行数]
        tail -3 messages
  ▼grep
    ファイルの中身から特定の単語を検索する。正規表現を使ったり複数ファイルを対象にすることができる。
    使用方法
      ①通常検索
        grep 検索正規表現 ファイル名
        例) ファイル名messagesからetcの文字列を検索
          grep 'etc' messages
      ②and検索
        grep 検索文字列 ファイル名 | grep 検索文字列2
    オプション
      -i ... 大文字と小文字を区別せず検索する
      -n ... 検索結果に行番号を表示する
      -l ... 検索結果にファイル名のみを表示する
  ▼find
    ファイルやディレクトリを検索する。
      例) /etcフォルダからhttpに関するファイルやディレクトリを探す
        find /etc -name "http*"
    ♦︎オプション
      -name
        ワイルドカードを使用してファイルやディレクトリ名の一部のみを指定した検索ができる
      -type f
        ファイルのみを対象として検索する
          例) /etcフォルダからhttpに関するファイルを探す
            find /etc -name "http*" -type f
      -type d
        ディレクトリのみを対象として検索する
      -exec
        検索結果に対してコマンドを実行する。
          方法① -exec [コマンド] +
            オプションの後に指定するコマンドに検索結果をまとめて渡して実行する。
              例) /etcフォルダからhttpに関するファイルを探し、行数をカウントする
                find /etc -name "http*" -type f -exec wc -l {} +
                ※{}は対象となる全ファイルと言う意味
          方法② -exec [コマンド] \;
            オプションの後に指定するコマンドを検索結果一つずつに対して実行する。
  ▼xargs
    前のコマンドの実行結果を標準入力から受け取って、次のコマンドに引き渡す仲介役をしてくれるコマンド。
      例) /etcフォルダからhttpに関するファイルを探し、行数をカウントする
        find /etc -name "http*" -type f | xargs wc -l
        ※findコマンドの結果をxargsコマンドがwcコマンドに引き渡している。
■bashの説明
  ターミナルのような対話型のインターフェースをシェルと呼ぶ。これもUNIXが提供するプログラムの一つ。
  ターミナルはbashと呼ばれるシェルの一つ。
  ▼コマンドの履歴を検索
    Ctrl + r ... 文字列を入力すると、直近のコマンドでその文字列を含むものを表示してくれる。さらに遡るにはCtrl + rをまた打てば良い。
■シンボリックリンク
  シンボリックリンクとは、UNIX系のOSにおいてファイルやフォルダに対する注文を代わりに受け付けて本来のファイルに中継するのを役目としている「注文受付代行ファイル」のこと。Pathに別名をつける。
  ▼作成方法
    ln -s 絶対Path 別名 ... -sオプション(symbolic)はシンボリックリンクを作成する
  ▼削除方法
    unlink シンボリックリンク名 (推奨。末尾の/はつけないようにする)
    rm シンボリックリンク名
■コマンドの作成
  ※コマンドを作成する前に、typeコマンドでそのコマンドが既に存在しないか調べる
  bashのコマンドで簡単な処理を書く。ファイル名はhiでコードは以下。
    #!/bin/bash
    echo "hi!"
    ※#!はシェバンと呼ばれていて、これがあったら次に続くプログラムで実行するという意味。上記の場合、/bin/bashで実行するという意味。
    ※実行するときはカレントディレクトリを明示しつつ、./hiとする。./をつけないと実行することができないので注意。
■PATHを通す
  UNIXではコマンドを検索するディレクトリが決められている。そのため、そのディレクトリ以外にあるコマンドを実行したい場合は、そのファイルがどこにあるか指定しないといけない。
  コマンドをどこから検索しているかは
    echo $PATH
  で見ることができる。この時に表示されるディレクトリは:で区切られている。
  ※$PATHはUNIXでコマンドを実行する際に使われる環境変数(コンピュータの環境に関する変数)。
  環境変数は自分で設定することもできる。特定のディレクトリをPATHに加えることを「PATHを通す」と表現する。
    例) export PATH=/home/vagrant/unix_lessons/myapp:$PATH
      PATHという名前で/home/vagrant/unix_lessons/myappというディレクトリと既に設定されているPATHの値を繋げて設定する
      ※この方法で追加したPATHはログアウトすると無効になってしまう。無効にしたくない場合は、.bash_profile(ログインシェルがbashの状態でログインした時に読み込まれる設定ファイル)でパスを記述する。
■リダイレクションとパイプ
  ▼リダイレクション
    「>」や「<」を使用する。
    あるコマンドの結果をファイルに保存したり、あるファイルの内容を他のコマンドに渡すことができる。
    ♦︎コマンドの結果をファイルに保存する
      「>」を使用する。
      「>」を使うとコマンドの結果でファイルを上書き
        例) echo "data"で出力した結果をファイル名cmd.txtに保存する
          "data" > cmd.txt
      「>>」を使うとコマンドの結果をファイルの末尾に追記するecho
        例) echo "free"で出力した結果をファイル名cmd.txtの末尾に追記する
          echo "free" >> cmd.txt
    ♦︎ファイルの内容をコマンドに渡す
      「<」を使用する。
        例) ファイル名cmd.txtの内容をbashに渡す
          bash < cmd.txt
    ♦︎ファイルの内容をコマンドに渡し、その結果を新しいファイルに保存する
      例) ファイル名cmd.txtの内容をbashに渡し、その出力結果をファイル名result.txtに保存する
        bash < cmd.txt > result.txt
  ▼パイプ
    「|」を使用する。
    コマンドの結果をファイルではなくて別のコマンドに渡す。
      例) ls -l /etc の中からphpが含まれる行を抜き出す
        ls -l /etc | grep "php"
    パイプは複数組み合わせることができる。
      例) ls -l /etc の中からphpが含まれる行を抜き出し、その結果の行数を表示する。
        ls -l /etc | grep "php" | wc -l
■ワイルドカード
  任意のと言う意味で「*」を使う。
  大量のファイルやディレクトリに対して特定の条件を付けて操作したい場合に使用する。
    例) /etcフォルダの中から拡張子が.confのファイルを表示する
      ls /etc/*.conf
  ♦︎その他
    「?」はなんでもいいから一文字だけ
      例) cの後に2文字が続き、その後任意の拡張子が続くファイルを表示する
        ls /etc/c??.*
■ブレース展開
  ブレースとは{}のこと。Bashではブレースの中にカンマ区切りで値を入れるとそれを展開してくれる。
    例)
      入力: echo {a, b, c}
      出力: a b c
      入力: echo {1..10}
      出力: 1 2 3 4 5 6 7 8 9 10
      入力: echo {1..3}{a..c}
      出力: 1a 1b 1c 2a 2b 2c 3a 3b 3c (数式のように組み合わせて展開される)
    例) app1,app2,app3,app4,app5のディレクトリを作成する
      mkdir app{1..5}
    例) app1,app2,app3,app4,app5のディレクトリ全てに対してファイル名がtest1,test2,test3で拡張子が.txt, .jpg, .gifのファイルをそれぞれ作成する
      touch app{1..5}/test{1..3}{.txt,.jpg,.gif}
■複数のコマンドを連続して実行
  &&で連結する
  例) testディレクトリを作成して、そのディレクトリに移動する
    mkdir test && cd test
