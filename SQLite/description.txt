SQLite
  ■概要
    比較的軽量で使いやすいデータベース
    スマートフォンやブラウザなどでもサポートされていて、広く使われている。
  ■公式サイト
    https://www.sqlite.org
  ■SQLiteの特徴
    1データベースが1ファイル。
    つまり、データベースを削除したいときは、単にデータベースのファイルを削除すれば良い。
  ■コメント
    -- 文字列
    /* 文字列 */
  ■コマンド
    ※SQLiteでは特殊なコマンドは「.」から始まる
    ・起動
        sqlite3 データベースを格納するファイル名
        (指定したファイル名が存在する場合はそのファイルを開き、存在しなければそのファイル上にデータベースを作成する)
    ・ヘルプ
        .help
    ・テーブル一覧を表示
        .tables
    ・テーブル/トリガーの構成を表示
        .schama (テーブル名/トリガー名)
        ※テーブル名を指定した場合は、そのテーブルの構成のみを表示し、テーブル名を指定しなかった場合は、全てのテーブルの構成を表示する。トリガー名を指定した場合はそのトリガーの構成を表示する
    ・終了
        .exit もしくは Ctrl+d
    ・外部ファイルの読み込み
        .read ファイル名
  ■select文で使用するコマンド
    ※select文を以下のコマンドの下に記述する
    ・select文を出力するときにカラム名も一緒に表示
        .headers on
    ・出力モードを設定
        .mode 引数
        ▼引数一覧
          csv ... カンマ区切りで出力
          column ... カラムごとに左揃えで出力
          html ... HTMLのテーブル形式で出力
          insert ... insert文として出力
          line ... 各カラムごとに行を分けて出力
          list ... 区切り文字でカラムを区切り1行で出力(デフォルト)
          tabs ... タブ区切りで出力
          tcl ... TCLのList形式で出力
  ■外部ファイルの読み込み
    方法1)
      DBにログインした状態で.readコマンドを使い、
        .read 外部ファイル名
      とする(詳細は上記に記載)
    方法2)
      コマンドライン上で、
        sqlite3 データベースを格納するファイル名 < 外部ファイル名
      とする
  ■テーブル
    ▼データ型
      ・整数 ... integer
      ・浮動小数点数 ... real
      ・文字列 ... text
      ・Binary Large OBject、入力データをそのまま格納(小さい画像やファイルをそのまま保存しておくことができる型) ... blob
      ・何もない ... null
      ※データ型はデータが格納されたときに動的に決められるようになっていて、文字列ようなデータが格納されればintegerと指定してあってもtext型などになる仕組みになっている。
      また、他のSQLを採用するデータベースと互換性を保つために、データ型の表記は割と緩やかになっていて、例えばintやtinyintと書いてもinteger型として解釈されたり、doubleと書いてもreal型と解釈されたり、varchar(255)と書いてもtext型として解釈されたりする。
    ▼主キー
      主キーはテーブルにつき一つしかつけることができない。
      主キーを設定するには、
        primary key
      と記述する。
      また、primary keyと書いた場合には動的にデータ型は割り当てられずに、必ず整数型(integer)になる。
      加えて、integer primary keyと書いた場合にはintegerは他の書き方ができなく、例えばintやtinyintをここで使うことはできない。
      ※integer primary keyと設定したカラムは、自動的にrowid(レコードが一意に決まる連番)を指し示しなさいと言う仕様になっている。
      ※integer primary keyはレコードを削除したり追加したりしているうちに、過去に設定した値を再び設定してしまう可能性がある。そのため、過去に設定した連番と同じものを再利用したくない場合は、idにautoincrementと言うキーワードをつけることで、過去に設定した値を再利用しない形で連番をつけてくれる。
    ▼制約
      ・unique ... 重複した値を許さない
      ・not null ... nullを許さない
      ・default ... 何も設定しなかったときにデフォルト値を設定する
      ・check ... 値をチェックする
  ■カラム(フィールド)について
    SQLiteではフィールドの追加はできるが、フィールドの名前を変更したり削除したりすることはできない。
    どうしてもそうしたい場合には新しいテーブルを用意して、そこに今あるデータを流し込まなければならない。
  ■記述上の注意
    ▼シングルクオテーション('')とダブルクオテーション("")
      文字列はシングルクオテーションで囲う。
      シングルクオテーションを文字列中で使いたいときは、「''」とする。
    ▼改行
      改行を表すような特殊文字は用意されていないので、改行をしたい場合は普通に改行すれば良い
  ■where文
    ▼like
    likeのワイルドカードである_(任意の1文字)と%(0文字以上の任意の文字列)自体を文字列条件に入れたい場合は、エスケープするための文字を自分で指定する
    例) nameが ohashi% をwhere文で指定したい場合
      where name like '%@%' escape '@'
      (エスケープするための文字を@と指定することで、@の後の%は文字列になる)
    ▼glob
      文字列に条件をつけるためのもの。
        ♦︎likeとglobの違い
          ・大文字小文字の区別
              likeは大文字小文字を区別しないが、globは大文字小文字を区別する
          ・ワイルドカードの表現
              任意の1文字は、likeだと_を使うが、globだと?を使う
              0文字以上の任意の文字列は、likeだと%を使うが、globだと*を使う
          ・正規表現にようなパターンマッチング
              likeだと正規表現のようなパターンマッチングは使えないが、globだとそれが使える。
              例) [a-z]とすると、aからzの間のうちのどれかにマッチする
          ・エスケープ
              likeだとエスケープするための文字を自分で指定するが、globだと[]で囲む
              例) *[*]* ... *を含む文字列
  ■limit
    limitは抽出条件を指定する。
    ・上位○件だけを表示
        limit ○
    ・上位○件のうち最初の△件を飛ばす(以下の2つの書き方がある)
        ①limit ○ offset △
        ②limit ○, △
  ■演算
    文字列を連結するときには
      ||
    を使う。
    例) select 'Name:' || name from users;
  ■関数
    ・sum()
      引数の集計結果を返す
    ・avg()
      引数の平均値を返す
    ・max()
      引数の最大値を返す
    ・min()
      引数の最小値を返す
    ・length()
      引数の文字数を返す
    ・upeer()
      引数を大文字にした文字列を返す
    ・lower()
      引数を小文字にした文字列を返す
    ・substr(文字列, 開始位置, 文字数)
      文字列の開始位置から文字数分だけを返す
    ・select_last_insert_rowid()
      直近で挿入されたレコードのidを返す
    ・random()
      乱数を返す。マイナスからプラスまでランダムな整数を返す
  ■トリガー
    あるテーブルで何らかの変更がされた時にそれをトリガーにして他のテーブルを合わせて変更する仕組み。
    ▼トリガーの作成
      create trigger トリガー名 insert/update/delete of new.カラム名/old.カラム名 on 処理を加えるテーブル名 begin 処理 end
      ※トリガーはinsertかupdateかdelete処理が走った時に使用することができる。
      ※更新前のカラムと更新後のカラムにはnewとoldと言うキーワードでアクセスできる。
  ■インデックス
    検索が高速になる。
    ▼インデックスの作り方
      create index インデックス名 on テーブル名(カラム名);
    ▼ユニークインデックス(重複した値を許さないインデックス)の作り方
      create uniq index インデックス名 on テーブル名(カラム名);
      ※これはcreate tableをするときにunique制約を設定するのと同じ意味
    ▼インデックスの一覧を表示
      .indices テーブル名
    ▼インデックスの削除
      drop index インデックス名
  ■日時
    SQLiteには日時を扱うデータ型が存在しない。
    データ型を扱いたい場合は、日時を表す文字列や数値を管理しておいて、それに関数を組み合わせていくやり方が一般的。
    ▼日付関数
      ・datetime()
        日時を取得する。
        ※引数に日時を表す文字列を与えることでそれらを足し合わせてくれる
        例)
          select datetime('now'); ... 現在の日時を返す
          select datetime('now', '+09:00:00'); ... 日本の現在の日時を返す
      ・date()
        日付だけ取得する。
        例)
          select date('2015-07-17', '+3 month', 'start of month', '-1 day'); ... 2017年7月17日の3ヶ月後の初日の1日前、つまり、2ヶ月後の末日を表示する
      ・time()
        時間だけ取得する。
      ・strftime()
        指定のフォーマットで日時を取得する。
    ▼create tableをするときに自動的にレコードの作成日時を入れる
      create table テーブル名(
        カラム名 datetime default (datetime('now', '+09:00:00'))
      );
      ※データ型にdatetimeと言う型は厳密にはないが、こう言う書き方も許されている
  ■結合
    ▼内部結合
      二つのテーブルを結合してデータを取得する方法の中で、指定したそれぞれのテーブルの絡むの値が一致するデータだけを取得する方法。
        select テーブル名.カラム名, ... from テーブル名1 inner join テーブル名2 on テーブル名1.カラム名1 = テーブル名2.カラム名2;
        ※innerは省略しても良い
    ▼外部結合
      ※SQLiteでサポートされているのはleft outer joinのみ(他のSQL言語ではleft outer join, right outer join, full outer joinも存在する)
      二つのテーブルを結合してデータを取得する方法の中で、指定したそれぞれのテーブルのカラムの値が一致するデータだけでなく、fromの後に指定したテーブルにだけデータがある場合も合わせて取得する方法。
        select テーブル名.カラム名, ... from テーブル名1 left outer join テーブル名2 on テーブル名1.カラム名1 = テーブル名2.カラム名2;
        ※outerは省略しても良い
    ▼交差結合
      二つのテーブルを結合してデータを取得する方法の中で、二つのテーブルのデータの全ての組み合わせを取得する方法。
        select テーブル名.カラム名, ... from テーブル名1 cross join テーブル名2 on テーブル名1.カラム名1 = テーブル名2.カラム名2;
  ■データベースの内容をSQLで出力する方法
    .output users.dump.sql ... 出力するファイル名を指定
    .dump テーブル名 ... テーブルの内容を出力
    ※「.output」コマンドを実行すると、select文の実行結果だけではなく画面へ出力されたものは全て指定したファイルへ行われるようになる。
    ※「.dump」コマンドでテーブル名を指定しないと全てのテーブルになる
  ■CSVファイルからデータを読み込む方法
    .mode csv ... モードをCSVにする
    .import CSVファイル名 テーブル名 ... CSVファイルの内容をデータベースに読み込む
    ※CSVファイルにidに相当するデータがない場合はエラーになってしまう。そのため、CSVファイルにidに相当するデータがない場合は以下のようにする。
    create table 一時テーブル名 (カラム名, ... ); ... 一旦CSVデータを流し込むテーブルを用意する
    .mode csv ... モードをCSVにする
    .import CSVファイル名 一時テーブル名 ... CSVデータを一時テーブルに流し込む
    insert into テーブル名 (カラム名, ... ) select (カラム名, ... ) from 一時テーブル名; ... 一時テーブルのデータをデータを流し込みたいテーブルに入れる
    drop table 一時テーブル名; ... 一時テーブルは必要ないので削除する
  ■データをCSVでファイルに書き出す方法
    .mode csv ... モードをCSVにする
    .output ファイル名 ... 出力するファイル名を指定
    select * from テーブル名; ... select文の実行結果が.outputコマンドで指定したファイル名に書き出される
