■Vagrantとは？
  仮想マシンを簡単に立ち上げるためのツール
  ▼利点
    これまでは手作業でローカル開発環境を整えるために仮想マシンを立ち上げてきたが、Vagrantを1回設定してしまえば、何度でも同じ構成で何回でもマシンを立ち上げることができる。
  ▼公式サイト
    www.vagrantup.com
  ▼注意事項
    Vagrantは仮想マシンを作るためのツールだが、準備として仮想マシンを作るソフトウェア自体が別途必要。
      例) VirtualBox, VMWare, Amazon EC2などがある
  ▼仮想マシンを立ち上げる手順
    1. Boxを取得する
      Boxとは仮想マシンのテンプレート。色々な構成の仮想マシンが考えられるが、そのテンプレートがWeb上にたくさん配布されている(vagrant boxesで検索)ので、まずはそれを取得する。
        ♦︎方法
          「DOCUMENT → Getting Started → Boxes」の順でWebページを移動する。
          vagrant box add コマンドを使ってBoxを取得する。
          今どういうBoxがあるかは「vagrant box list」で見ることができる
          例)
            ・vagrant box add hashicorp/precise64 (※preciseはUbuntuOSのバージョン名)
            ・vagrant box add centos64 https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box (centOS7.0系の64bitバージョン)
    2. テンプレートをもとに自分にあった設定にして仮想マシンを初期化する
      「vagrant init Box名」とすることで、初期化されてVagrantfileができる。Vagrantfileの設定を元に仮想マシンを立ち上げていく。
    3. 仮想マシンを起動する
      Vagrantfileがあるフォルダで「vagrant up」とする。
  ▼vagrant コマンド
    ・vagrant box add (Boxを追加する)
    ・vagrant box list (追加したBoxのリストを表示)
      ./.vagrant.d/boxes を見てもわかる
    ・vagrant box -h (vagrant box と合わせて使えるコマンドが表示される)
    ・vagrant box remove (追加したBoxを削除する)
    ・vagrant init box名 (box名を元に初期化したVagrantfileを作成)
    ・vagrant up (仮想マシンを起動する)
    ・vagrant status (状態を表示)
    ・vagrant suspend (スリープさせる)
    ・vagrant resume (復帰させる)
    ・vagrant halt (終了させる)
    ・vagrant reload (再起動する。何らかの設定を変えた後に使う)
    ・vagrant destroy (仮想マシン自体を削除する。Vagrantfile自体は残る)
    ・vagrant ssh (ssh接続をして、仮想マシンの中にvagrantユーザーで入る。ディレクトリは/home/vagrant)
    ・vagrant package (Boxを作成する)
    ・exit (仮想マシンから出る)
  ▼CentOSで使えるコマンド
    ♦︎Webサーバを立ち上げてページを表示してみる
    (※CentOSでは/var/www/htmlにWebページを置く)
      ・sudo yum -y install httpd (Webサーバをインストール)
      ・sudo service httpd start (Webサーバを立ち上げる)
      ・sudo chkconfig httpd on (再起動してもWebサーバが立ち上がるように設定する)
      ・sudo service iptables stop (ファイアーウォールを切断する。ローカル開発環境の場合はこれで問題ない)
      ・sudo chkconfig iptables off (再起動してもiptablesが立ち上がらないようにする)
  ▼Vagrantfile
    ♦︎ネットワーク設定
      ネットワークの設定はnetwork辺りにある。
      :private_networkのコメントを外して、ipアドレスを設定する(今回は192.168.33.10とする)
  ▼Provisioning
    vagrant upをした後に自動的に実行される一連の処理のこと。
    Webサーバーのインストールやファイアーウォールの停止を手動で行なっていたが、これを自動できるようにする。
    実行例は以下。
    例1) 簡単な出力をする
      1. mkdir myCentOSVM2 (新しいディレクトリを作成して進める)
      2. cd myCentOSVM2
      3. vagrant init centos64 (初期化)
      4. Vagrantfileで設定していく
        Provisioningのための高度なツールにはChefとかPuppetなどがあるが、今回は簡単にシェルスクリプトを使ってやっていく。以下をVagrantfileに記述する。
        config.vm.provision :shell, :inline => "echo hello world"
        (inlineとすることで続けて命令をそのままかける)
      5. vagrant up
      このようにすると仮想マシンが立ち上がり、Provisioningの設定が反映されて最後に「hello world」と表示される。
    例2) 別ファイルにコマンドを書いてそれを読み込んで実行する
      1. 例1の3まで行う
      2. 以下をVagrantfileに記述する。
        config.vm.provision :shell, :path => "provision.sh"
        (pathとすることで実行するファイルを指定できる)
      3. provision.shファイルを作成して中身を以下とする。
        sudo yum -y install httpd
        sudo service httpd start
        sudo chkconfig httpd on
      4. vagrant provision
        (すでに仮想マシンが立ち上がっているので、Provisionだけを再実行する)
  ▼自分でBoxを作る
    Vagrantfileをある程度の設定をした後で、何回も使いまわすと言う時には自分でBowを作る。手順は以下。
    1. パッケージにしたい仮想マシンのVagrantfileがあるディレクトリで「vagrant package」とするとpackage.boxができる。
    2. これをシステムに追加したい場合は、「vagrant box add 作成したいbox名 package.box」
    3. 追加されたboxは「~/.vagrant.d/boxes」に配置されるので、手順1で作成されたpackage.boxは削除してもいい。
  ▼plugin
    ♦︎プラグインのコマンド
      ・vagrant plugin -h (プラグイン関係のコマンドを表示)
      ・vagrant plugin list (プラグインの一覧を表示)
      ・vagrant plugin install プラグイン名
      ・vagrant plugin uninstall プラグイン名 (プラグインをアンインストールする)
    ♦︎プラグイン例
      ■sahara
        ♦︎概要
          sandboxモードを有効にする。OSの途中の状態を記憶しておき、好きな時にそこまでロールバックできる。仮想マシンで何らかのプログラムをインストールしたり、変更を加えた後にいまいちだったから変更を破棄したい時に使える機能。
        ♦︎使用方法
          ・vagrant sandbox on (sandboxモードを開始する)
          ・vagrant sandbox status (sandboxの状態を表示)
          ・vagrant sandbox rollback (vagrant sandbox on をした時の状態に戻す)
          ・vagrant sandbox commit (vagrant sandbox on をした後の変更を保存する。※ただし、このコマンドは仮想マシンが立ち上がっていると非常に遅いので、いったん vagrant suspend や vagrant halt などでマシンを止めてから実行する。)
          ・vagrant sandbox off (sandboxモードを終了する。※ただし、このコマンドは仮想マシンが立ち上がっていると非常に遅いので、いったん vagrant suspend や vagrant halt などでマシンを止めてから実行する。)


  ▼別子)Chefについて
    ♦︎Chefとは？
      ChefはChef社が提供するプロビジョニングツール。
      Chefは、物理環境だけでなく、クラウドなどの仮想環境でも、サーバやアプリケーションなどのインフラを自動構成/管理できる。Rubyで実装されているのが特徴で、インフラの構成情報もRubyを使ってコードで管理する。Vagrantによるシェルスクリプトの実行でも簡単なプロビジョニングは可能だが、例えば、複数台のサーバを統合管理したり、OSによって異なるコマンドの差異などを考慮しながら構築したりするのは、大きな負担になる。Chefはインフラ環境構築を簡単に行うための便利な機能が用意されている。
    ♦︎おさえておきたいChefの用語
      Chefのコマンドや設定フィルなどは、料理になぞらえて独特の名前がつけられている。そのため、Chefを初めて触る時は混乱しがちなので、用語を簡単に説明する。
      ・Chef Server
        管理したい複数のサーバ群のインフラの構成情報を集中管理するホストのこと。Webベースの管理ツールやChefを操作するためのAPIを提供しており、それらを使ってインフラを自動構成したり、状態を管理したりする。大規模/複雑なインフラ構成の場合に導入される。
      ・Chef Client
        実際にインフラが自動生成される対象のホストのこと。実環境でのサーバの場合もあれば、AWSのEC2インスタンスのように、クラウドの仮想環境の場合もある。
        Chef Serverを導入する時の管理対象下のホストにインストールされるのがChef Client。
      ・Chef Solo
        Chefはシステムの本番環境での複数台のサーバを自動構成することができるソフトウェアなので、通常Chef ServerとChef Clientを導入して、クライアントサーバ型のアーキテクチャを利用する。しかし、開発環境を構築するときなどは、Chefをスタンドアロンで利用することもできる。その時に使うコマンドがChef Solo。現時点での利用者が多い。
        また、スタンドアロンでChefを利用したい場合は、Chef Zeroを使うこともできる。Chef Zeroはインメモリで動く軽量なChef Server。ただし、Chef Zeroを使うには、Chefのクライアントサーバ型アーキテクチャの知識が必要になる。現在はChef Soloの方が利用者が多いが、今後はChef SoloからChef Zeroに移行していくものと思われる。
      ・Recipe(レシピ)
        Chef Clientで実際に設定されるインフラの構成情報を書いたプログラムのこと。Rubyの文法をベースにしてChefのDSL(Chef固有の命令)を使って記述する。例えば、ミドルウェアをインストールして、サービスを起動するなど、従来、対象の端末にログインしてコマンド操作/各種スクリプトで行なっていた処理などをすべてRubyのコードで書く。
      ・CookBook(クックブック)
        インフラの構成をコードで行うといっても、インストールコマンドを実行するだけで動作するものもあれば、DBサーバのように専用のユーザーアカウントを用意して、適切な設定ファイルを用意しなければいけないものなどもある。そこで、作成したレシピを実行するために必要になる設定ファイルのひな形やパラメータ一覧などをまとめたものがCookBook。CookBookの中にはRecipeも含まれる。
      ・Knifeコマンド
        Chefを管理するための便利なコマンドラインツール。Chef Clientをインストールすると自動的に使える。
    ♦︎Chefの基本構成
      Chefでインフラを構成するときのアーキテクチャの例
      例1. 大規模なインフラ構成の場合
        サーバ台数の多い大規模なシステムや、役割の異なる多くのサーバを一元管理するときには、Chef Serverを用意して、インフラを統合管理する。業務アプリケーション設計と同じく、拡張性や再利用性などを考慮してCookBookwを作成し、インフラの状態(Clientの状態)を管理する。そのためChefの使い方やコーディングはもちろん、実運用も考慮する必要がある。
      例2. 小規模なインフラ構成の場合
        部門内で使用するサーバなどサーバ数台規模の小規模なインフラ構成の場合、Chef Clientをスタンドアロンで使用することができる。作成したCookBookは手動で各サーバに配布/展開する。このときKnifeコマンドを使う。
