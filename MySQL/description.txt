■コマンド
  ▼help;
    使えるコマンドを表示
  ▼SELECT USER();
    現在のユーザーを表示
  ▼SELCT DATABASE();
    現在の操作対象のデータベースを表示
  ▼SELECT * FROM mysql.user;
    ユーザー一覧を表示
■ログイン方法
  mysql -u ユーザー名 -p [データベース名]
  ※-pとデータベース名は指定しなくても良い
  ※上記コマンドを入力後にパスワードを求められる
■作業用ユーザーを設定する
  rootユーザーは権限が広すぎるので危険が伴う。そこで、データベースごとに作業用ユーザーを設定するのが一般的。
  ▼ユーザーの作成
    コマンドは以下。
    CREATE USER ユーザー名(ユーザー名とホスト名の組み合わせで指定する) IDENTIFIED BY パスワード
      例) CREATE USER dbuser01@localhost IDENTIFIED BY 'testtest';
  ▼作成したユーザーに対して権限を設定する
    コマンドは以下。
    GRANT 権限 ON レベル TO ユーザー名@ホスト名;
    ※設定できる権限の種類は主に以下。
      ALL ... GRANT OPTION(他のユーザーに対する権限を設定することができる)以外の全てのシンプルな権限を設定
      USAGE ... 権限なし
    各レベルに応じて権限を設定するには、それぞれ次のようにする。
      グローバルレベル
        GRANT 権限 ON *.* TO ユーザ名@ホスト名;
      データベースレベル
        GRANT 権限 ON データベース名.* TO ユーザ名@ホスト名;
      テーブルレベル
        GRANT 権限 ON データベース名.テーブル名 TO ユーザ名@ホスト名;
      カラムレベル
        GRANT 権限 (カラム1, カラム2, ...) ON データベース名.テーブル名 TO ユーザ名@ホスト名;
    例) ユーザー名dbuser01@localhostに対してmydb01というデータベースの全てのテーブルに関する全ての権限を与える
      GRANT ALL ON mydb01.* TO dbuser01@localhost;
  ▼ユーザーの権限の確認
    show grants for ユーザー名@ホスト名
  ▼ユーザーの作成と権限の付与を同時に行う
    GRANT 権限 ON レベル TO ユーザー名@ホスト名 IDENTIFIED BY パスワード;
■外部ファイルのコマンドを実行
  実行方法は以下の二つ。
  ①リダイレクションを使用する方法
    mysql -uroot < create_myapp.sql
  ②mysqlサーバーにログインした状態で実行する方法
    source ./create_myapp.sql もしくは \. ./create_myapp.sql
■データ型
  数値
    int (整数)
    float (浮動小数点)
    double (floatより精度の高いもの)
    int unsigned (正の値しか格納できなくなるが、範囲は2倍の0~255)
  文字列
    固定長
      char
    可変長
      varchar ... 上限あり(255バイトまで)
      text ... 上限なし
  時間/日付
    時間
      time
    日付
      date
    日時
      datetime
  真偽値
    boolean (1桁の整数の型であるtinyint(1)の別名。内部的にはtrueは数字の1、falseは数字の0で管理される)
    ※MySQLでは0とnullがfalseで、空文字を含むそれ以外の値は全てtrueとなる。
  enum型
    複数の文字列の中から1つだけを格納できる。
    enumの値には内部的に連番(1から)で数値が割り当てられている。そのため、数値を用いてwhere文を書くなども可能。
  set型
    enum型は複数の選択肢から1つだけ選べるデータ型だが、複数選びたい場合にはset型を使う。
    挿入時にsetで定義した文字列の順番を変えても、create tableで定義した順番に戻る。そのため、抽出時にはcreate tableで定義した順番を守りつつ条件を指定する必要がある。
    setの値には内部的に数値が割り当てられており、最初の値が2の0乗で1、次の値が2の1乗で2、次の値が2の2乗で4...といったようになっている。
■データの挿入
  insert into users (id, name, score) values (1, 'taguchi', 5.8);
  ♦︎まとめる方法
    insert into users (id, name, score) values
      (1, 'taguchi', 5.8),
      (2, 'fkoji', 8.2),
      (3, 'dotinstall', 6.1),
      (4, 'yamada', null);
■フィールドに制限をかける
  not null ... nullを許さない
  default ... デフォルト値を設定する
  unique ... 重複した値を許さない
  primary key ... 主キー。auto_incrementという指定をつけて自動的に連番を振るように設定することが多い。
■テーブルの変更
  ♦︎カラムの追加
    alter table テーブル名 add column カラム名 データ型;
    ※末尾に「after 既存のカラム名 」をつけると指定した既存のカラム名の次にカラムを追加できる
  ♦︎カラムの定義の変更
    alter table テーブル名 change 変更するカラム名 変更内容(新しいカラム名、新しいデータ型、フィールド制限など。複数指定可能);
  ♦︎テーブル名の変更
    alter table テーブル名 rename 新しいテーブル名;
■select文
  SELECT文では末尾に\G(必ず大文字)をつけると垂直に表示できる。この時、セミコロンは不要。
  ♦︎where文
    nullの場合はis null, is not nullを使う
    ▼like条件
      レコードをパターンマッチで抽出する。
      ワイルドカードは以下の2種類
        % ... 任意の0文字以上の文字列
        _(アンダーバー) ... 任意の1文字
      MySQLは大文字と小文字を区別しない。大文字と小文字を区別した場合はbinary演算子を使う。
        例) nameが大文字のTから始まるレコードを抽出
          select * from users where name like binary 'T%';
■並び替え、抽出件数の制限
  ♦︎並び替え
    order by カラム名 ... カラム名の昇順に並び替え
    order by カラム名 desc ... カラム名の降順に並び替え
    desc ... 表示を逆順にする
  ♦︎抽出件数の制限
    limit 件数 ... 最初から件数分のレコードを表示
    limit 件数 offset 開始位置 ... offsetを使うことでレコードの取得を開始する位置を指定できる
■組み込み関数
  数値演算
    round(数値, 桁の位置)
      四捨五入を行う。第二引数に四捨五入を行う桁の位置を指定することができる。
      ※第二引数は省略可能
    floor(数値)
      小数点以下切り捨て
    ceil(数値)
      小数点以下切り上げ
    rand()
      0以上1未満のランダムな数値を返す
  文字列演算
    length(文字列) ... 文字列の長さを返す
    substr(文字列, 数値) ... 第二引数に入れた数値文字目以降の文字列を返す
    substr(文字列, 数値, 数値) ... 第二引数に入れた数値文字目以降の第三引数に入れた数値文字分を返す
    upper(文字列) ... 大文字に変換
    lower(文字列) ... 小文字に変換
    concat(文字列, 文字列, ...) ... 文字列の連結
■if文とcase文
  if文
    if(条件, trueの時の値, falseの時の値)
  case文
    2種類の書き方がある。
    書き方①
      case 条件
        when 値 then 処理
        when 値 then 処理
        else それ以外の処理
      end
    書き方②
      case
        when 条件と値 then 処理
        when 条件と値 then 処理
        else それ以外の処理
      end
■抽出結果をテーブルにする
  ♦︎select文の結果をテーブルにする
    asを使用する。
    create table 作成するテーブル名 as select文;
    上記を利用してテーブルのコピーを作成することもできる。
      create table 作成するテーブル名 as select * from users;
      ※asは省略できる
  ♦︎テーブルの構造だけコピーしてデータはコピーしない
    likeを使用する。
    create table 作成するテーブル名 like 作成元テーブル名;
■データの集計処理
  ♦︎データの数を数える
    count()を使用する。
    引数にnullのレコードを含むカラムを追加した場合は、nullを除いてカウントされる。
    引数に*を指定することで全体のデータ個数をカウントする。
      select count(*) from テーブル名;
  ♦︎引数の集計結果を返す
    sum()
  ♦︎引数の平均値を返す
    avg()
  ♦︎引数の最大値を返す
    max()
  ♦︎引数の最小値を返す
    min()
■サブクエリ
  情報を取得するための一時テーブルを生成する。
  select サブクエリ名.カラム名 from (サブクエリを生成するselect文) as サブクエリ名;
■ビュー
  ビューは抽出条件に名前をつけてテーブルのように扱うことができるもの。
    create view ビュー名 as ビューにしたいselect文
    ※あくまでビューは抽出条件に名前をつけたものであって値をコピーして新しいテーブルを作るわけではないので、大元になるテーブルの値が変わるとビューの値も変わる
  ビューはテーブルと同じ扱いになるので、一覧を見るには
    show tables;
  とする。
  ビューがどのように作られたかを見るには
    show create view ビュー名;
  とする。
■トランザクション
  一連の処理を必ずまとめて行いたい場合に使用する。
  開始
    start transaction;
  終了
    commit;
  トランザクションの途中で処理を終了して変更内容を破棄したい場合は、commit;の代わりにrollback;とする。
■索引(インデックス)
  索引はキーやインデックスと呼ばれる。インデックスを設定しておくとデータの抽出が早くなる。primary keyには必ず索引がつけられる。
    alter table テーブル名 add index インデックス名 (インデックスを設定するカラム名)
  ♦︎テーブルにどういったインデックスが貼られているかを確認する
    show index from テーブル名;
  ♦︎インデックスが使われているかどうかを調べる。出力結果のkeyの項目で実際に使われたインデックスが表示される。
    explain select文;
  ♦︎インデックスの削除
    alter table テーブル名 drop index インデックス名
  ♦︎インデックスを作成すべきカラムの特徴
    ①テーブル内のデータ量が多く、少量のレコードを検索する場合
    ②WHERE句の条件、結合の条件、ORDER BY句の条件として頻繁に利用する場合(ただし、全表走査が目的のテーブルであれば索引は不要)
    ③NULL値が多いデータから、NULL値以外の検索をする場合(インデックスはNULLを含まないのでNULL値以外の検索には効果がある)
  ♦︎インデックスを作成すべきでないカラムの特徴
    ・テーブルの規模が小さいか、テーブルから大部分のレコードを検索する場合
    ・WHERE句の条件としてあまり使用されない場合
    ・カラムの値が頻繁に挿入、更新、削除される場合(インデックスはテーブルに新しいレコードが挿入されればインデックスにも自動的に値が格納される。そのため、データの検索速度は向上するが、挿入、更新、削除の処理ではインデックスのメンテナンス作業が発生し速度低下につながる)
    ・WHERE句の条件として使用されるが、カラムが式の一部として参照される場合
■内部結合
  二つのテーブルに共通のデータだけを取得する方法。
    select from テーブル名1 inner join テーブル名2 on テーブル名1.紐付けるカラム名 = テーブル名2.紐づけるカラム名
    ※innerは省略することができる。つまり以下のようにも書くことができる。
      select from テーブル名1 join テーブル名2 on テーブル名1.紐付けるカラム名 = テーブル名2.紐づけるカラム名
  ♦︎特定のフィールドだけ取得したい場合は、フィールド名の前にテーブル名を書く。
    ※テーブル名が自明の場合は省略することができる。
      例) select posts.id, posts.title, posts.body, comments.body from posts join comments on posts.id = comments.post_id;
      ※titleはpostsにしか存在しないので、テーブル名を省略してtitleでも良い
■外部結合
  二つのテーブルで一致しないデータも含めて取得する方法。どちらのテーブルを軸にするかで構文が異なる。
  ♦︎left outer join
    左側に書いたテーブル(テーブル1とする)を軸にする。テーブル1に関連するレコードがテーブル2にあってもなくても、全てのテーブル1のレコードを取得する。関連するレコードがない場合はnullで埋められる。
      select * from テーブル名1 left outer join テーブル名2 on テーブル名1.紐づけるカラム名 = テーブル名2.紐づけるカラム名
      ※outerは省略することができるので、以下のように書くこともできる。
        select * from テーブル名1 left join テーブル名2 on テーブル名1.紐づけるカラム名 = テーブル名2.紐づけるカラム名
  ♦︎right outer join
    右側に書いたテーブル(テーブル2とする)を軸にする。テーブル2に関連するレコードがテーブル1にあってもなくても、全てのテーブル2のレコードを取得する。関連するレコードがない場合はnullで埋められる。
      select * from テーブル名1 right outer join テーブル名2 on テーブル名1.紐づけるカラム名 = テーブル名2.紐づけるカラム名
      ※outerは省略することができるので、以下のように書くこともできる。
        select * from テーブル名1 right join テーブル名2 on テーブル名1.紐づけるカラム名 = テーブル名2.紐づけるカラム名
■外部キー制約
  テーブルの指定したカラムに格納できる値を他のテーブルに格納されている値だけに限定するもの。参照される側のテーブルを親テーブル、参照する側のテーブルを子テーブルと呼ぶ。
  ♦︎外部キー制約の追加
    alter table 子テーブル名 add constraint 外部キー制約名 foreign key (制約をかけたいカラム名) references 親テーブル (参照元になるカラム名)
    ※紐づけるカラムの型は一致していないといけない。
  (注意)外部キー制約を設定すると、関連するデータがある場合にはデータの削除や更新が簡単にはできなくなる。これはデータの整合性を取るためである。
  ♦︎外部キー制約の削除
    alter table テーブル名 drop foreign key  外部キー制約名;
■last_insert_id()
  last_insert_id()は直前に挿入されたレコードのidを調べる命令。関連した複数のテーブルにデータを挿入する場合はlast_insert_id()をよく使う。
■トリガー
  あるテーブルに何らかの変更が起きた時にそれをトリガーとして何らかの処理を行える仕組み。トリガーにはinsert, update, deleteの3種類がある。
  ♦︎トリガの作成
    create trigger トリガー名 before/after insert/update/delete on テーブル名 for each row トリガー処理
  ♦︎トリガの削除
    drop trigger トリガー名
  ♦︎トリガの一覧を表示する
    show triggers;
  ♦︎更新前のデータや更新後のデータを参照する
    ▼更新前のデータを参照
      new.カラム名
      ※トリガー処理がinsert及びupdateで使用可能
    ▼更新後のデータを参照
      old.カラム名
      ※トリガー処理がdelete及びupdateで使用可能
■delimiter
  MySQLの区切り文字は通常セミコロンであるが、ストアドプロシージャ(DB上での一連処理に名前をつけて関数のように呼び出して使用できるもの)やファンクション、トリガーを登録・使用するときは、セミコロンが必ずしも発行するSQL文の最後とならない。そのような場合にdelimiterを使用する。
  ♦︎開始
    delimiter 区切り文字(//など)
  ♦︎終了
    区切り文字(//など)
    ※使用後はdelimiter ;として区切り文字をセミコロンに直す
■挿入/更新時刻でレコードを更新
  日時に関するデータを入れるにはdatetimeを使う。
  create table テーブル名 (
    カラム名 データ型,
    カラム名 データ型,
    ...,
    created datetime
  )
  ♦︎デフォルトでinsert時にその時の日時を入れる
    created datetime default current_timestamp
  ♦︎update時にその時の日時を入れる
    updated datetime default current_timestamp on update current_timestamp
■日時の計算
  ♦︎date_add()
    例) 現在から三ヶ月先
      date_add(current_date(), interval 3 month);
  ♦︎date_sub()
    例) 現在から一ヶ月前
      date_sub(current_date(), interval 1 month);
  ♦︎interval
    intervalは日時の計算に使う。
    ▼使い方
      interval 数値 単位
      ※単位として扱えるもの ... microsecond, second, minute, hour, day, week, month
  ♦︎date_format
    日時を好きな書式で表示
    例) 現在の日付を曜日,月,年で表示
      date_format(current_date(), '%W %M %Y')
    ※date_format()で使用できる文字
      %Y(Year) ... 4桁の年を表示。例) 2006
      %y(year) ... 2桁の年を表示。例) 06
      %M(Month) ... 月の名前を英語で表示。例) September
      %m(month) ... 月を数字で表示。例) 09
      %c ... 月を数字で頭の0なしで表示。例) 9
      %d(day) ... 日付を表示。例) 23
      %W(Week) ... 曜日を表示。例) Wednesday
      %p ... AM,PMを表示。例) PM
      %r ... 時刻を12時間表記で表示。例) 09:14:34 PM
      %k ... 時刻を24時間表記で表示。例) 21
      %i(minute) ... 分を表示。例) 34
      %s(second) ... 秒を表示。例) 20
■データベースの内容をファイルに書き出す
  ターミナルで以下のコマンドを叩く。
    mysqldump -u ユーザー名 -p データベース名 > ファイル名
